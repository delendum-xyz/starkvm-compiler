// WASM opcodes to AST
class Wasm {

typedef bindata_t = varray[uint8];
fun get (x:bindata_t) (i:int) => x.(i.size);
//fun get (x:bindata_t) (i:int,l:int) {

fun uleb128(x:bindata_t) (var i:int) : int * uint64 {
  var y = 0.uint64;
  var shift = 0.uint64;
  while x.i \& 0x80.uint8 > 0.uint8 do
   y = y \| ((x.i.uint64 \& 0x7F.uint64) << shift);
    shift = shift + 7.uint64;
    ++i;
  done
  y = y \| x.i.uint64 << shift; 
  return i+1,y;
}

fun ileb128(x:bindata_t) (i:int) : int * int64 {
  var j,y = uleb128 x i;
  if x.(j - 1) \& 0x40.uint8 > 0.uint8 perform
    y = y \| (~0.uint64 << ((j - i).uint64 * 7.uint64));
  return j,C_hack::cast[int64] y; 
}

fun hexb (x:uint8) : string {
  fun nib (x:uint8) => if x < 10.uint8 then char (x + "0".char.ord.uint8) else char (x - 10.uint8 + "A".char.ord.uint8);
  var upper =  (x \& 0xF0.uint8) >> 4u8;   
  var lower =  x \& 0x0F.uint8;
  return "0x" + upper.nib + lower.nib; 
}

// Note: section 0 is the header NOT a custom section.
// We skip custom sections
typedef section_index_t = (int * int) ^ 12;
  
fun parse_module_structure (inp: bindata_t) (idx: int) : section_index_t {
  var tot = inp.len.int - 1;
  var x : section_index_t;
  for j in 0..11 perform x&.j <- (0,0); 
  var start = 8;
  while start < tot do
    var i = start;
    var secbyte = inp.i.uint8;
    ++i;
    def i, var n = uleb128 inp i;
    if secbyte > 0u8 perform
      x&.secbyte <- (i, n.int);
    start = i + n.int;
    if start > tot do
      println$ "Malformed module, section " + secbyte.str + " overflows data size " + tot.str;
      System::exit 1; 
    done 
  done
  if start != tot do
    println$ "Malformed module, final index " + start.str + " should equal file size " + tot.str;
    System::exit 1;
  done
  return x;
}

typedef limits = (
  | `min_limit of  uint32 // 0x00
  | `range_limit of uint32 * uint32 // 0x01
);

fun parse_limits (inp: bindata_t) (start:int) : int * limits =>
  match inp.get start with 
  | 0x00u8 => 
    let k,n = uleb128 inp (start + 1) in
    k,(`min_limit n.uint32 :>> limits)
  | 0x01u8 => 
    let k1,n1 = uleb128 inp (start + 1) in
    let k2,n2 = uleb128 inp k1.int in
    k2,(`range_limit (n1.uint32, n2.uint32) :>> limits)
; 
  
typedef vec[T] = varray[T];

fun parse_vec[T] (parseT: bindata_t -> int -> int * T) 
  (inp:bindata_t) (start:int) : int * vec[T] 
{
   var j, n = uleb128 inp start;
   var out = varray[T] (n.size);
   for i in 0..n.int - 1 do
    def j, var v = parseT inp j;
    push_back (out,v);
  done
  return j,out;
}


typedef vectype = (
  | `vectype
);
typedef numtype = (
  | `i32
  | `i64
  | `f32
  | `f64
);
 
typedef reftype = (
  | `funcref
  | `externref
);

typedef valuetype = (
  | numtype
  | vectype
  | reftype
);

fun parse_valuetype (inp:bindata_t) (start:int) : int * valuetype =>
  start + 1,
  match inp.get start with
  | 0x7Fu8 => #`i32 :>> valuetype
  | 0x7Eu8 => #`i64 :>> valuetype
  | 0x7Du8 => #`f32 :>> valuetype
  | 0x7Cu8 => #`f64 :>> valuetype
  | 0x7Bu8 => #`vectype :>> valuetype
  | 0x70u8 => #`funcref :>> valuetype
  | 0x6Fu8 => #`externref :>> valuetype
  endmatch
;

typedef functype = ( 
 | `functype of vec[valuetype] * vec[valuetype] 
);

typedef memtype = (
 | `memtype of limits
);

typedef mut = (
  | `const             // 0x00
  | `var               // 0x01
);

typedef globaltype = (
  | `globaltype of mut * valuetype
);

typedef tabletype = (
  `tabletype of reftype * limits
);

fun parse_functype (inp: bindata_t) (start:int) : int * functype => 
  let i, domain = parse_vec[valuetype] parse_valuetype inp start in
  let j, codomain = parse_vec[valuetype] parse_valuetype inp i in
  j,`functype (domain,codomain)
;

fun parse_type_section (inp: bindata_t) (var start:int, span:int) : varray[functype] {
  var endidx = start + span;
  var i, n = uleb128 inp start;
  println$ "N fun types = " + n.str;
  var fts = varray[functype] (n.size);
  for j in 0 ..  n.int - 1 do
    def i, var ft = parse_functype inp i;
    push_back (fts, ft);
  done
  if i != endidx do
    println$ "Malformed function type section, final index " + i.str + " should equal " + endidx.str;
    System::exit 1;
  done
  return fts;
}

} // class

/*  test cases from Wikipedia:

begin 
  var x = varray (0xE5.uint8,0x8E.uint8,0x26.uint8);
  println$ x;
  var i = 0;
  var j, y = Wasm::uleb128 x i;
  println$ j,y; // 624485
end
begin 
  var x = varray (0xC0.uint8,0xBB.uint8,0x78.uint8);
  println$ x;
  var i = 0;
  var j, y = Wasm::ileb128 x i;
  println$ j,y; // -12345
end

*/
