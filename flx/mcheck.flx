include "./lib/mfront_front";
include "./lib/mfront_printer";
include "./lib/miden_opcodes";
include "./lib/strutil";

typedef block_t = MidenOpcodes::block_t;
typedef mark_t = MidenOpcodes::mark_t;

proc get_block (outb: &block_t, outm: &mark_t) (fail:string->any) (inp: %<string)  {
  var x = read inp;
  var op : mark_t = MidenOpcodes::mparse fail x;
  proc advance() { 
    x = read inp;
    op = MidenOpcodes::mparse fail x;
  }
  fun isend(x:mark_t) => match x with | `end => true | _ => false;
  fun iselse(x:mark_t) => match x with | `else=> true | _ => false;

  var blocks = Empty[block_t];
  var left: block_t;
  var right: block_t;
  var trail: mark_t;
 
  while not (op.isend or op.iselse) do
    match op with
    | `if =>
      get_block (&left, &trail) fail inp;
      match trail with
      | `end => 
        blocks = Cons (`if left, blocks);
        advance;

      | `else =>
        get_block (&right,&trail) fail inp;
        if not trail.isend perform fail$ "Improper termination of else block: " + trail.str;
        blocks = Cons (`ifelse (left, right), blocks);
        advance;

      | x => fail$ "Improper if block terminator " + trail.str;
      endmatch;

    | `while =>
      get_block (&left, &trail) fail inp;
      blocks = Cons (`while left, blocks);
      if not trail.isend perform fail$ "Improper termination of while block: " + trail.str;
      advance;

    | `repeat count =>
      get_block (&left, &trail) fail inp;
      blocks = Cons (`repeat (count, left), blocks);
      if not trail.isend perform fail$ "Improper termination of repeat block: " + trail.str;
      advance;
 
    | `op op =>
      blocks = Cons (`op op,blocks);
      advance;

    | `else => ;
    | `end => ;

    | _ => fail$ "Unexpected " + op.str;
    endmatch;
  done
  var result =  
    match blocks with
    | [x] => x
    | _ => `seq blocks.rev.unbox
  ;
  outb <- result; 
  outm <- op;
}

chip get_program (fail:string->any)
  connector io
    pin inp: %<string
{
// BUG: doesn't handle blank line at start
  var procs = strdict[MidenOpcodes::stack_state_t]();

  while true do
    var x = read io.inp;
    var op = MidenOpcodes::mparse fail x;
    var pb : block_t;
    var trail : mark_t;
    match op with
    | `proc (name,count) =>
       get_block (&pb, &trail) fail io.inp;
       var s1 = "proc." + name + "." + count.str + " # 0..0\n";
       var s,a = MidenOpcodes::indent_stack fail 1 procs (MidenOpcodes::stack_state_t (0,0)) pb;
       var s2 = s1 + s+ "end   # "+a.str+"\n";
       println$ cat "\n" (map align_comments (split (s2,"\n")));
       // save stack state of procedure
       procs.add name a;

    | `begin =>
       get_block (&pb, &trail) fail io.inp;
       s1 = "begin # 0..0 \n";
       s, a = MidenOpcodes::indent_stack fail 1 procs (MidenOpcodes::stack_state_t (0,0)) pb;
       s2 = s1 + s+ "end   # "+a.str+"\n";
       println$ cat "\n" (map align_comments (split (s2,"\n")));

    endmatch;
  done
}

chip mkline 
  connector io
    pin inp: %<string
    pin out: %>string
{
  while true do
    var x = read(io.inp);
    write (io.out, x + " # shit\n");
  done
}

proc mvmvalidate(filename:string) {
  var ein,eout = mk_ioschannel_pair[string]();
  proc ewriter (e: string) {
    write (eout, "fail["+ line_count.str + "]: " + e); 
  }
  fun failproc (e:string) : any { throw_continuation {  ewriter e; }; };

  device source = loader (filename, failproc);
  device counter = line_counter &line_count;
  device printout = printer &line_count;
  device prog = get_program failproc;
  var line_count = 0; // reset for pass 2
  run {
    circuit 
      connect source.out, counter.inp
      connect counter.out, comment_stripper.inp
      connect comment_stripper.out, instruction_splitter.inp
      connect instruction_splitter.out, prog.inp
      //connect mkline.out, printout.inp
      wire ein to ehandler.inp
    endcircuit
  };
}

mvmvalidate(System::argv 1);
