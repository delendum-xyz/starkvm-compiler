class expr_sym {
  // recursive descent expression parser
  variant expr = 
    | Binop of string * expr * expr
    | Unop of string * expr 
    | Const of string // integer constant
    | Ident of string // variable name
    | Error
  ;
  instance Str[expr] {
    fun str: expr -> string =
    | Binop (op, l, r) => "(" + l.str + ") " + op + " (" + r.str + ")"
    | Unop (op, l) => op + "(" + l.str + ")"
    | Const s => s
    | Ident s => s
    | Error => "ERROR"
    ;
  }

  var binop_map = strdict[string]();
  var unop_map = strdict[string]();

  binop_map.add "+" "u32checked_add # +\n";
  binop_map.add "-" "u32checked_sub # -\n";
  binop_map.add "*" "u32checked_mul # *\n";
  binop_map.add "/" "u32checked_div # /\n";
  binop_map.add "%" "u32checked_mod # %\n";

  binop_map.add "&" "u32checked_and # and\n";
  binop_map.add "|" "u32checked_or # or \n";
  binop_map.add "^" "u32checked_xor # xor\n";

  binop_map.add "<<" "u32checked_shl # <<\n";
  binop_map.add ">>" "u32checked_shr # >>\n";

  binop_map.add ">" "u32checked_gt # >\n";
  binop_map.add "<" "u32checked_lt # <\n";
  binop_map.add "<=" "u32checked_lte # <=\n";
  binop_map.add ">=" "u32checked_ge # >=\n";
  binop_map.add "==" "u32checked_eq # ==\n";
  binop_map.add "!=" "u32checked_neq # !=\n";

  unop_map.add "-" "u32checked_neg # neg\n";
  unop_map.add "!" "u32checked_not # not\n";
}

class expr_parser {
  open expr_sym;
  open lexer;
  typedef pstate_t = expr * lexer::toks_t;

  fun parse_atom (fail:string->any) (inp: toks_t)  : pstate_t {
    match inp with
    | Empty => 
      fail "Expected atom got End of Line";
    | Cons (head, tail) =>
      match head with
      | "(" =>
         var node, rest = parse_expr fail tail;
         match rest with
         | Empty => fail "Expected ) parsing atom got Eno of Line";
         | Cons (head, tail) => 
           match head with
           | ")" =>
             return node, tail; // success
           | _ => fail ("Expected ) got " + head)  ;
           endmatch;
         endmatch;
       | x when (x.0).iscidstart =>
         return Ident x, tail;
       | x when (x.0).isdigit =>
         return Const x, tail;
       | x => fail ("Unexpected Symbol " + x + " parsing " + inp.str);
       endmatch;
    endmatch;
  }
      
  // repeated prefix ops not supported (eg - - 1 is not allowed)
  fun parse_prefixop (fail:string->any) (inp: toks_t) : pstate_t {
  //println$ "Parsing prefixop " + inp.str;
    match inp with
    | Empty => 
      fail "Expected prefix expr got End of Lin";
    | Cons(op, tail) => 
      if not (op in ("-","!")) do
        return parse_atom fail inp;
      else
        var a, rest = parse_atom fail tail;
        return (Unop (op,a), rest);
      done
    endmatch;
  }


  fun parse_factor (fail:string->any)(inp: toks_t) : pstate_t {
    match inp with
    | Empty =>
      fail "Expected factor got End of Line";
    | _ =>
      var tail = inp;
      def var left, tail = parse_prefixop fail tail; 
      while true do
        match tail with
        | Empty =>
          return left, tail;

        | Cons(op, tail2) =>
          if not (op in ("*", "/", "%")) do 
            return left, tail;
          else 
            def var right, tail = parse_prefixop fail tail2;
            left = Binop (op, left, right); // reduce
          done
        endmatch;
      done
    endmatch;
  }
  fun parse_term (fail:string->any) (inp: toks_t) : pstate_t {
    match inp with
    | Empty =>
      fail "Expected term got End of Line";
    | _ =>
      var tail = inp;
      def var left, tail = parse_factor fail tail; 
      while true do
        match tail with
        | Empty =>
          return left, tail;

        | Cons(op, tail2) =>
          if not (op in ("+", "-")) do 
            return left, tail;
          else 
            def var right, tail = parse_factor fail tail2;
            left = Binop (op, left, right); // reduce
          done
        endmatch;
      done
    endmatch;
  }
  fun parse_shift (fail:string->any) (inp: toks_t) : pstate_t {
  //println$ "parse_shift";
    var left, tail = parse_term fail inp;
    match tail with
    | Empty => return left, tail;
    | Cons(op, tail2) =>
      if not (op in ("<<",">>")) do
        return left, tail;
      else
        var right, tail3 = parse_term fail tail2;
        return Binop(op, left, right), tail3;
      done
    endmatch;
  }
  fun parse_bitand (fail:string->any) (inp: toks_t) : pstate_t {
  //println$ "parse_bitand";
    match inp with
    | Empty =>
      fail "Expected bitand expr got End of Line";
    | _ =>
      var tail = inp;
      def var left, tail = parse_shift fail tail; 
      while true do
        match tail with
        | Empty =>
          return left, tail;

        | Cons(op, tail2) =>
          if not (op == "&") do 
            return left, tail;
          else 
            def var right, tail = parse_shift fail tail2;
            left = Binop (op, left, right); // reduce
          done
        endmatch;
      done
    endmatch;
  }
  fun parse_bitxor (fail:string->any) (inp: toks_t) : pstate_t {
  //println$ "parse_bitxor";
    match inp with
    | Empty =>
      fail "Expected  bitxor expr got End of Line";
    | _ =>
      var tail = inp;
      def var left, tail = parse_bitand fail tail; 
      while true do
        match tail with
        | Empty =>
          return left, tail;

        | Cons(op, tail2) =>
          if not (op == "^") do 
            return left, tail;
          else 
            def var right, tail = parse_bitand fail tail2;
            left = Binop (op, left, right); // reduce
          done
        endmatch;
      done
    endmatch;
  }

  fun parse_bitor (fail:string->any) (inp: toks_t) : pstate_t {
  //println$ "parse_bitor";
    match inp with
    | Empty =>
      fail "Expected bitor expr got End of Line";
    | _ =>
      var tail = inp;
      def var left, tail = parse_bitxor fail tail; 
      while true do
        match tail with
        | Empty =>
          return left, tail;

        | Cons(op, tail2) =>
          if not (op == "|") do 
            return left, tail;
          else 
            def var right, tail = parse_bitxor fail tail2;
            left = Binop (op, left, right); // reduce
          done
        endmatch;
      done
    endmatch;
  }
  fun parse_comparison  (fail:string->any)(inp: toks_t) : pstate_t {
  //println$ "parse_comparison";
    var left, tail = parse_bitor fail inp;
    match tail with
    | Empty => return left, tail;
    | Cons(op, tail2) =>
      if not (op in ("<",">","==","<=", "=>", "!=")) do
        return left, tail;
      else
        var right, tail3 = parse_bitor fail tail2;
        return Binop(op, left, right), tail3;
      done
    endmatch;
  }
  fun parse_expr  (fail:string->any)(inp: toks_t) : pstate_t {
  //println$ "parse_expr";
    return parse_comparison fail inp;
  }
}

class expr_emit {
  open expr_sym;

  fun postfix (fail:string->any) (ps: &symbol::symbol_table_t) (e:expr) : string =>
    let fun pf(e:expr):string => postfix fail ps e in
    match e with
    | Const s => "push."+s+" # "+s+"\n"
    | Ident s => let a = symbol::get_address fail ps s in "loc_load."+a.str+" # <-" + s+"\n"
    | Error => "ERROR\n"

    | Binop (op, a, b) =>
      let op = match binop_map.get op with
      | None => "# Can't find '" + op "' in operator map\n"
      | Some x => x
      in
      pf a + pf b + op

    | Unop (op, a) =>
      let op = match unop_map.get op with
      | None => "# Can't find '" + op "' in operator map\n"
      | Some x => x
      in
      pf a  + op
  ;
}

