// Front end utilities

// Load a file and emit its lines.
chip loader(filename: string, fail:string->0) 
  connector io
    pin out : %> string
{
  var f = load(filename);
  if f == "" perform 
    throw_continuation { fail$ "Missing input file " + filename; };
  var lines = split(f,char "\n");
  for line in lines do
    write (io.out, line);
  done
}

// Copy lines, incrementing line counter
chip line_counter (counter: &int)  
  connector io
    pin inp: %<string
    pin out: %>string
{
  while true do
   var line = read io.inp;
   post_incr counter;
   write (io.out, line);
  done
}

// Throw out comments
chip comment_stripper
  connector io
    pin inp: %< string
    pin out: %> string
{
  while true do
    var s = read(io.inp);
    for (var i=0; i< s.len.int; ++i;) 
      if s.[i] == char "#" goto endline;
  endline:>
    write (io.out, s.[0 .. i - 1]);
  done
}

// split a line of space separated instructions 
// into single instructions
chip instruction_splitter 
  connector io
    pin inp: %< string
    pin out: %> string
{
  while true do
    var x = read io.inp;
    var instructions = respectful_split x;
    match instructions with
    | Cons (h,t) =>
      if h in ("LABEL", "CALL", "GOTO", "TAILCALL", "eval","if","let") do
        write(io.out, cat " " instructions);
      else 
        for instruction in instructions perform write(io.out, instruction);
      done
    | _ => ;
    endmatch;
  done
}

// Error handling chip.
// Print error to stdout then terminate process
chip ehandler  
  connector io
    pin inp : %< string
{
  var e = read io.inp;
  println$ "[ehandler]: " + e;
  System::exit(1);
}

// pass 1 consumes all the lines and accumulates label map
// index in varray will be label number - 2
// array records label and line number pair
// duplicate label writes error on error channel
chip label_scanner (labels: varray[(string * int)]) 
  connector io
    pin inp: %< string
    pin err: %> string
{
  var counter = 0;
  while true do
    ++counter;
    var line = read io.inp;
    var tokens = respectful_split line;
    match tokens with
    | ["LABEL",x] =>
      if  x.MidenOpcodes::isname  do
        scan: for i in 0 .. labels.len.int - 1 do
          var lname, lno = labels.i;
          if x == lname do
            write (io.err, "Duplicate label " + x + " on line " + counter.str + ", previous definition line " + lno.str);
          else
            labels.push_back (x, counter);
            break scan;
          done
        done
      else 
        write (io.err, "Malformed LABEL instruction on line " + counter.str + ":\n" + line);
      done
    | _ => ;
    endmatch;
  done
}
